-------------------------
    jsSHA - ChangeLog
-------------------------

1.5 (2013-12-15)
=========================
- Added optional numRounds argument to getHash
  - Note: this necessitated removing the hash result caching functionality
- Reduced file size by optimizing internal constants
- Removed charSize input and replaced with encoding to handle Unicode.  NOTE:
  Only Code points up to 0xFFFF are supported.
  - charSize = 16 is effectively replaced by encoding = "UTF16"
  - charSize = 8 was wrong in terms of handling UTF-8 and has been replaced by
    encoding = "UTF8"
- Changed method of referencing "window" to be compatible with WebWorkers,
  Node.js, and AMD (thanks piranna!)

1.42 (2012-12-28)
=========================
- Readded v1.4 Safari patch to support older versions

1.41 (2012-12-23)
=========================
- Fixed incorrect hash issue with Chrome x64 v25 (Dev channel), also provides
  stable patch to v1.4 Safari issue.

1.4 (2012-12-08)
=========================
- Added new input type, TEXT, that is functionally identical to ASCII*
- Added new input type, B64, for base-64 encoded strings
- Added new input and output formatting parameters
  - getHash and getHMAC take an optional parameter, outputFormatOpts,
    that is a hash list containing the keys "outputUpper" (boolean, only
    applicable to HEX output) and "b64Pad" (string, only applicable to Base-64
    output) that have default values of false and "=", respectively
  - jsSHA constructor takes an optional parameter, charSize (8 or 16) that
    specifies the character width of the input (TEXT and ASCII input only)
- Modified comments to be Google Closure Compiler compliant
- Added a SUPPORTED_ALGS flag that, when used with the Google Closure Compiler,
  will remove unused functions/function portions
  - Removed all src/*_nice.js files as the SUPPORTED_ALGS flag renders them
    obsolete
- All production-ready files are now produced using the Google Closure Compiler
  with ADVANCED_OPTIMIZATIONS resulting in further reduced filesizes
- The SHA-1 only implementation now requires that that "SHA-1" be specified as
  the variant when using getHash and getHMAC
- Removed test/HMAC.py as new NIST tests made the need for it obsolete
- Significantly changed the test/test.html to make it easier to understand and
  to allow for easier adding of test cases
- Replaced previous error returning code with thrown exceptions
- Fix for 64-bit Safari issue (thanks Ron Garret and Chris Warren-Smith!)
  - NOTE: While this fix works, it is merely a workaround for a WebKit JavaScript
   optimizer bug, see https://bugs.webkit.org/show_bug.cgi?id=88673 for more detail

* This library misused the term ASCII so input type of TEXT was added with the
  intention of deprecating ASCII

1.31 (2012-07-21)
=========================
- Updated project URL to point to new GitHub repository
- Added a compressed version of sha.js

1.3 (2010-09-01)
=========================
- Changed method of declaring objects/classes
- Moved non-instance specific variables and methods to class scope
- Removed logically correct but unneeded conditionals

1.2 (2009-07-22)
=========================
- Added the HMAC algorithm for all supported hashes (using both ASCII and hex
  keys)
- As a result of adding HMAC, added support for hash input text to be hex
  (ASCII representation of hex)
- Added multiple variants of safeAdd functions, resulting in a significant
  performance gain
- Removed wrapper.js file
- Used a different JavaScript compressor resulting in smaller file sizes

1.11 (2008-12-07)
=========================
- Fixed a base-64 encoding issue resulting from a missing capital 'X'

1.1 (2008-09-25)
=========================
- Fixed an issue with incorrect hashes being generated when jsSHA ojbects were
  used to generate multiple hashes

1.0 (2008-09-25)
=========================
- Made all functions/variables follow an object-orientated methodology
- Removed support for string hash output as the hash is rarely ASCII friendly
- Changed the interface to calculate hashes (see README)
- Made sha.js validate against JSLint (http://www.jslint.com/) using
  "Recommended" settings

0.1 (2008-02-21)
=========================
- Initial public release
